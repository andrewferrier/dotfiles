# Keybindings:
#
# <enter> - type a command, such as 'touch'
# R - bulk rename directory
# [, ] - goto prev/next directory in jumplist
# w - launches shell
#
# Commands:
#
# filter - filters files shown
# glob-select - selects files using glob

# Make shell commands safer
set shellopts '-eu'

# See https://github.com/gokcehan/lf/wiki/Tips#dynamically-set-number-of-columns
# - will only work on lf 32+
cmd on-redraw &{{
    if [ $lf_width -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $lf_width -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

cmd on-cd &{{
    fasd -A $PWD
    printf "\033]0; lf [${PWD/#$HOME/\~}]\007" > /dev/tty
}}

on-cd

cmd normfn &{{
    set -o noglob

    IFS="$(printf '\n\t')"; normfn $fx
}}

cmd trash ${{
    set -o noglob

    IFS="$(printf '\n\t')"; trash $fx
}}

cmd delete ${{
    set -o noglob

    files=$(echo $fx | sed 's/\n/,/g')
    printf "\nDelete $files ?"
    read -n1 -r REPLY
    case "$REPLY" in
        [yY]) IFS="$(printf '\n\t')"; rm -rfv -- $fx;;
    esac
}}

cmd folderize_prep ${{
    FOLDER=$(date +%Y-%m-%dT%H-%M-%S-)
    lf -remote "send $id push :folderize<space>$FOLDER"
}}

cmd folderize ${{
    set -o noglob

    FOLDER=$1
    mkdir $FOLDER
    IFS="$(printf '\n\t')"; mv $fx $FOLDER
}}

cmd zip ${{
    set -o noglob

    if [ $(echo "$fx" | wc -l) -gt 1 ]; then
        # FIXME: Make this more efficient by not using a temp dir; this is
        # tricker than it looks because we want relative paths
        FOLDER=$(date +%Y-%m-%dT%H-%M-%S)
        mkdir $FOLDER
        IFS="$(printf '\n\t')"; cp -r $fx $FOLDER
        cd $FOLDER
        zip -r ../$FOLDER.zip .
        cd ..
        rm -rf $FOLDER
    else
        effective=$(basename $fx)
        zip -r $effective.zip $effective
        rm -rf $effective
    fi
}}

cmd fasd-file ${{
    set -o noglob

    FILE="$(file-list -f -s)"
    if [ -n "$FILE" ]; then
        PARENT=$(dirname $FILE)
        FILENAME=$(basename $FILE)
        PARENT="$(printf '%s' "$PARENT" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id cd \"$PARENT\""
        FILENAME="$(printf '%s' "$FILENAME" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id select \"$FILENAME\""
    fi
}}

cmd fasd-dir ${{
    set -o noglob

    DIR="$(file-list -d -s)"
    if [ -n "$DIR" ]; then
        DIR="$(printf '%s' "$DIR" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id cd \"$DIR\""
    fi
}}

cmd open-directory &{{
    $OPENER "$PWD"
}}

cmd take %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
    lf -remote "send $id push l"
}}

cmd rename_directory ${{
    nvim $PWD
}}

cmd set_lf_vars ${{
    if [ $(lf --version | cut -f1 -d'.') -ge 29 ]; then
        # See https://github.com/gokcehan/lf/issues/1258
        lf -remote "send $id set cursorpreviewfmt \"\\033[7m\""
    fi
}}

set_lf_vars

cmd set_os_mappings ${{
    if [ $(uname) = Linux ]; then
        lf -remote "send $id map Y \$printf \"%s\" \"\$fx\" | xclip -selection clipboard"
    else
        lf -remote "send $id map Y \$printf \"%s\" \"\$fx\" | pbcopy"
    fi
}}

set_os_mappings

set anchorfind false
set incsearch true
set infotimefmtnew "2006-01-02 15:04"
set infotimefmtold "2006-01-02 15:04"
set period 1
set previewer ~/.config/lf/scope.sh
set cleaner ~/.config/lf/cleaner.sh
set timefmt "2006-01-02 15:04:05"
set truncatechar "â€¦"

set info size
set dircounts

map <c-f> :fasd-file
map <c-g> :fasd-dir

map <delete> :trash
map <enter> :shell
map F :folderize_prep
map N :normfn
map T $tig
map o :open-directory

map ga :cd ~/paperwork
map gd :cd /data
map ge :cd ~/personal
map gf :cd ~/dotfiles
map gg :cd ~/gitco
map gk :cd ~/Desktop
map gl :cd ~/Downloads
map gn :cd ~/notes

# Repeat previous command
map . :read; cmd-history-prev; cmd-enter

# See https://github.com/gokcehan/lf/wiki/Tips#enhancing-the-rename-command
map I :rename; cmd-home
map A :rename; cmd-end
map r :rename; cmd-delete-home
map R :rename_directory

# Remove unused mappings
map i
