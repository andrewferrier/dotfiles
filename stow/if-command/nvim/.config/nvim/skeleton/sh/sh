#!/usr/bin/env bash
#
# Snippets:
#
# ****** HOW TO CREATE A TEMPORARY FILE IN A CROSS-PLATFORM WAY
# TEMPFILE=$(mktemp "${TMPDIR:-/tmp}/XXXXXXX")
#
# ****** HOW TO CHECK IF SCRIPT IS RUNNING INTERACTIVELY
# if [ -t 1 ]; then
# ....
#
# ****** GETTING OPTIONS
# usage() {
#     echo "Usage: $0 [-x] [-s <45|90>] [-p <string>]" 1>&2
#     exit 1
# }
#
# x=false
#
# while getopts "xs:p:" o; do
#     case "${o}" in
#     x)
#         # Boolean option
#         x=true
#         ;;
#     s)
#         # Enum option
#         s=${OPTARG}
#         [[ $((s == 45 || s == 90)) -ne 0 ]] || usage
#         ;;
#     p)
#         # Generic string option
#         p=${OPTARG}
#         ;;
#     *)
#         usage
#         ;;
#     esac
# done
# shift $((OPTIND - 1))
#
# [[ "${s:-}" ]] || usage
# [[ "${p:-}" ]] || usage
#
# ****** LOGGING FUNCTIONS
# log() {
#     echo "$(date "+%Y-%m-%dT%H:%M:%S %Z" || true) ${SCRIPT_NAME}: $*" >>"/tmp/${SCRIPT_NAME}.log"
#
#     if [[ ${OSTYPE} == linux* ]]; then
#         echo "$*" | systemd-cat --identifier="${SCRIPT_NAME}"
#     fi
# }
#
# logpipe() {
#     while IFS='' read -r line; do
#         log "${line}"
#     done
# }
#
# # Send stdout and stderr to log function ONLY
# exec 2> >(logpipe)
#
# ****** ECHO TO STDERR
# echo >&2 "xxx"
#
# ****** PIPE ALL STREAMS TO /dev/null
# mycommand &> /dev/null
#
# ****** CHECK IF COMMAND EXISTS
# if type the_command_to_check &>/dev/null; then
#     # Do stuff
# fi

set -o errexit
set -o noglob
set -o nounset
set -o pipefail

shopt -s inherit_errexit

XDG_CACHE_HOME="${XDG_CACHE_HOME:-${HOME}/.cache}"
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-${HOME}/.cache/xdg-runtime}" # This will probably only need to be set on MacOS
XDG_STATE_HOME="${XDG_STATE_HOME:-${HOME}/.local/state}"

if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
GIT_ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && git rev-parse --show-toplevel)"
SCRIPT_NAME=$(basename "$0")
readonly SCRIPT_DIR
readonly SCRIPT_NAME
readonly GIT_ROOT_DIR

trap cleanup INT TERM ERR EXIT

cleanup() {
    exit
}