#!/usr/bin/env python

import argparse
import datetime
import logging
import subprocess
import sys
from argparse import Namespace
from pathlib import Path
from zoneinfo import ZoneInfo

import pytz
import requests
from icalendar.cal import Calendar, Component

logger = logging.getLogger("ical-summary")
syserr_handler = logging.StreamHandler(stream=sys.stderr)
syserr_handler.setFormatter(logging.Formatter("%(name)s: %(levelname)s: %(message)s"))
logger.addHandler(syserr_handler)


def parse_arguments() -> Namespace:
    parser = argparse.ArgumentParser(
        description="Process .ical VTODO files and email completed tasks."
    )
    parser.add_argument("directory", type=str)
    parser.add_argument("email", type=str)
    parser.add_argument("healthcheck_url", type=str)
    parser.add_argument("--number-of-days", type=int, default=7)
    return parser.parse_args()


def get_completed_tasks(
    directory: Path, number_of_days: int
) -> list[tuple[datetime.datetime, str]]:
    completed_tasks: list[tuple[datetime.datetime, str]] = []
    cutoff_date = datetime.datetime.now(pytz.utc) - datetime.timedelta(
        days=number_of_days
    )

    for filename in directory.iterdir():
        if filename.suffix == ".ics":
            filepath = directory / filename
            with filepath.open("rb") as f:
                calendar: Component = Calendar.from_ical(f.read())  # pyright: ignore[reportArgumentType]
                for component in calendar.walk():
                    if component.name == "VTODO":
                        completed = component.get("COMPLETED")  # pyright: ignore[reportAny]
                        if completed is not None:
                            completed_date: datetime.datetime = completed.dt  # pyright: ignore[reportAny]
                            summary: str = component.get("SUMMARY")  # pyright: ignore[reportAny]

                            if (
                                completed_date
                                and summary
                                and completed_date >= cutoff_date
                            ):
                                completed_tasks.append((completed_date, summary))

    return completed_tasks


def format_tasks_as_markdown(title: str, formatted_tasks: list[str]) -> str:
    markdown_list = [f"# {title}\n"]
    markdown_list.extend([f"- {task}" for task in formatted_tasks])
    return "\n".join(markdown_list)


def send_email(email_address: str, subject: str, content: str) -> None:
    subprocess.run(  # noqa: S603
        ["/usr/bin/mail", "-s", subject, email_address],
        input=content,
        check=True,
        text=True,
    )


def format_relative_date(dt: datetime.datetime) -> str:
    cutoff_7daysago = datetime.datetime.now(pytz.utc) - datetime.timedelta(days=7)

    if dt >= cutoff_7daysago:
        return dt.strftime("%A")
    else:
        return dt.date().isoformat()


def format_task(task: tuple[datetime.datetime, str]) -> str:
    return f"{format_relative_date(task[0])}\t{task[1]}"


def main() -> None:
    args = parse_arguments()
    directory: str = args.directory  # pyright: ignore[reportAny]
    number_of_days: int = args.number_of_days  # pyright: ignore[reportAny]
    email: str = args.email  # pyright: ignore[reportAny]
    healthcheck_url: str = args.healthcheck_url  # pyright: ignore[reportAny]

    completed_tasks = get_completed_tasks(Path(directory), number_of_days)
    completed_tasks.sort(key=lambda tup: tup[0])
    display_tasks: list[str] = list(map(format_task, completed_tasks))

    subject = (
        "Completed Tasks Summary for "
        + datetime.datetime.now(tz=ZoneInfo("Europe/London")).date().isoformat()
    )
    markdown_content = format_tasks_as_markdown(subject, display_tasks)

    send_email(email, subject, markdown_content)
    ping_healthchecks(healthcheck_url)


def ping_healthchecks(url: str) -> None:
    response = requests.get(url, timeout=10)
    response.raise_for_status()


if __name__ == "__main__":
    main()
