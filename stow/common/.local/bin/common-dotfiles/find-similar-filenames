#!/usr/bin/python

import argparse
import logging
import os
from pathlib import Path
import sys

from Levenshtein import ratio  # pyright: ignore[reportUnknownVariableType]

logger = logging.getLogger("find-similar-filenames")
logger.propagate = False
logger.setLevel(logging.WARNING)

syserr_handler = logging.StreamHandler(stream=sys.stderr)
syserr_handler.setLevel(logging.WARNING)
syserr_handler.setFormatter(
    logging.Formatter("find-similar-filenames: %(levelname)s: %(message)s")
)
logger.addHandler(syserr_handler)


def find_similar_filenames(
    files: list[Path],
    threshold: float,
) -> list[tuple[Path, Path, float]]:
    similar_files: list[tuple[Path, Path, float]] = []

    for i in range(len(files)):
        for j in range(i + 1, len(files)):
            if files[i].stem == files[j].stem:
                continue

            similarity = float(ratio(files[i].name, files[j].name))  # pyright: ignore[reportUnknownArgumentType]

            if similarity >= threshold:
                similar_files.append((files[i], files[j], similarity))

    return similar_files


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Find similar filenames in a directory tree."
    )
    parser.add_argument(
        "directory", type=str, nargs="+", help="The root directory to search for files."
    )
    parser.add_argument(
        "--threshold",
        type=float,
        default=0.8,
        help="The similarity threshold (0.0 to 1.0). Default is 0.8.",
    )

    args = parser.parse_args()

    args_threshold: float = args.threshold  # pyright: ignore[reportAny]
    args_directory: list[str] = args.directory  # pyright: ignore[reportAny]

    all_files: list[Path] = []

    for directory in args_directory:
        if not Path.is_dir(Path(directory)):
            logger.error(
                f"Error: The specified directory '{directory}' does not exist."
            )
            continue

        for root, _, files in os.walk(directory):
            all_files = [Path(root) / file for file in files]

    similar_files = find_similar_filenames(all_files, args_threshold)

    if similar_files:
        logger.info("Similar filenames found:")
        for file1, file2, similarity in similar_files:
            logger.info(f"{file1} <--> {file2} (Similarity: {similarity:.2f})")
    else:
        logger.info("No similar filenames found.")


if __name__ == "__main__":
    main()
