#!/usr/bin/env python

import datetime
import json
import sys
from operator import itemgetter
from typing import TypedDict

import humanize
from termcolor import colored


class Entry(TypedDict):
    due: int | None
    id: str
    priority: int
    summary: str


data: list[Entry] = json.load(sys.stdin)

current_timezone = datetime.datetime.now().astimezone().tzinfo

now_time = datetime.datetime.now(tz=current_timezone)
now_date = datetime.datetime.now(tz=current_timezone).date()


def due_date_key_func(due_date: Entry) -> int:
    if due_date["due"] is None:
        return 9999999999999
    else:
        return due_date["due"]


data = sorted(data, key=itemgetter("summary"))
data = sorted(data, key=due_date_key_func, reverse=True)

for entry in data:
    datecolor = "light_grey"
    entrycolor = "white"

    if entry["priority"] > 0 and entry["priority"] < 4:
        entrycolor = "red"
    elif entry["priority"] >= 4 and entry["priority"] < 7:
        entrycolor = "yellow"
    elif entry["priority"] >= 7 and entry["priority"] <= 9:
        entrycolor = "blue"

    if entry["due"] is None:
        human_date = ""
    else:
        due_time = datetime.datetime.fromtimestamp(entry["due"], tz=current_timezone)
        due_date = datetime.datetime.fromtimestamp(
            entry["due"], tz=current_timezone
        ).date()
        date_difference = due_date - now_date

        if due_time.hour == 0 and due_time.minute == 0 and due_time.second == 0:
            # This is a time-agnostic timestamp

            human_date = humanize.naturalday(due_date, format="%Y-%m-%d")

            if now_date > due_date:
                datecolor = "red"
            elif now_date == due_date:
                datecolor = "green"
        else:
            human_date = (
                humanize.naturalday(due_date, format="%Y-%m-%d")
                + " "
                + due_time.strftime("%H:%M")
            )

            if now_time > due_time:
                datecolor = "red"
            elif date_difference > datetime.timedelta(days=2):
                human_date = humanize.naturalday(due_date)

        if (
            due_date > now_date
            and date_difference < datetime.timedelta(days=7)
            and date_difference > datetime.timedelta(days=1)
        ):
            human_date = due_date.strftime("%A")

    EM_SPACE = "â€ƒ"

    print(
        f"{entry['id']:5}{EM_SPACE}"
        + colored(f"{human_date:14}{EM_SPACE}", datecolor, force_color=True)
        + colored(f"{entry['summary']}", entrycolor, force_color=True)
    )
