#!/usr/bin/python
#
# TODO: Support .cr2

import argparse
import logging
import multiprocessing
import os
from pathlib import Path
import subprocess
import sys

from tqdm import tqdm
from tqdm.contrib.concurrent import thread_map

logger = logging.getLogger("find-dead-images")
logger.propagate = False
syserr_handler = logging.StreamHandler(stream=sys.stderr)
logger.addHandler(syserr_handler)

parser = argparse.ArgumentParser()
parser.add_argument("sourcedirs", nargs="+")
args = parser.parse_args()


THRESHOLD = 0.03


def get_mean_brightness_normalized(filename: Path) -> float:
    try:
        cmd = subprocess.run(
            [
                "convert",
                str(filename),
                "-colorspace",
                "Gray",
                "-format",
                '"%[fx:mean]"',
                "info:",
            ],
            capture_output=True,
            text=True,
            check=True,
        )
    except subprocess.CalledProcessError:
        return False

    mean_brightness = float(cmd.stdout.replace('"', "").strip())

    if mean_brightness > 0.5:
        return 1 - mean_brightness
    else:
        return mean_brightness


def check_image(filename: Path) -> None:
    mean_brightness = get_mean_brightness_normalized(filename)

    tqdm.write("{:.2f}".format(mean_brightness) + "\t" + str(filename))  # noqa: UP032


def is_image(filename: Path) -> bool:
    return filename.suffix.lower() in [".png", ".jpg", ".jpeg", ".gif"]


def walk_dir(directory: str) -> list[Path]:
    paths: list[Path] = []

    for dirpath, _, filenames in os.walk(directory):
        for filename in filenames:
            path = Path(dirpath) / Path(filename)
            if not Path.is_symlink(path) and is_image(path):
                paths.append(path)

    return paths


def main() -> None:
    paths: list[Path] = []
    sourcedirs: list[str] = args.sourcedirs  # pyright: ignore[reportAny]

    for directory in sourcedirs:
        paths.extend(walk_dir(directory))

    logger.info(f"Found {len(paths)} images.")

    thread_map(check_image, paths, max_workers=multiprocessing.cpu_count())

    logger.info("DONE.")


if __name__ == "__main__":
    main()
