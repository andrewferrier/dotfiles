#!/usr/bin/env python

from datetime import datetime, timedelta
from icalendar import Calendar
import argparse
import logging
import os
import pytz
import shutil
import sys

logger = logging.getLogger("ical-archive")
logger.propagate = False
logger.setLevel(logging.WARN)

syserr_handler = logging.StreamHandler(stream=sys.stderr)
syserr_handler.setLevel(logging.WARN)
syserr_handler.setFormatter(logging.Formatter("my-script: %(levelname)s: %(message)s"))
logger.addHandler(syserr_handler)


def process_ics_file(file_path: str, target_dir: str, dry_run: bool):
    with open(file_path, "rb") as f:
        cal = Calendar.from_ical(f.read())

    for component in cal.walk():
        if component.name == "VTODO":
            if component.get("STATUS") == "COMPLETED":
                completed_date: datetime = component.get("COMPLETED")
                if completed_date:
                    completed_date: datetime = completed_date.dt
                    if isinstance(completed_date, datetime):
                        if completed_date.tzinfo is None:
                            completed_date = pytz.UTC.localize(completed_date)

                        if completed_date < datetime.now(pytz.UTC) - timedelta(
                            days=365
                        ):
                            if dry_run:
                                logger.info(
                                    f"[DRY RUN] Would move: {file_path}, completed_date = {completed_date}, summary = {component.get('SUMMARY')}"
                                )
                            else:
                                target_path = os.path.join(
                                    target_dir, os.path.basename(file_path)
                                )
                                shutil.move(file_path, target_path)
                                logger.info(f"Moved: {file_path} -> {target_path}")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("source_dir")
    parser.add_argument("target_dir")
    parser.add_argument("--dry-run", action="store_true")
    parser.add_argument("-v", "--verbose", action="store_true")

    args = parser.parse_args()

    if args.verbose:
        logger.setLevel(logging.INFO)
        syserr_handler.setLevel(logging.INFO)

    if not os.path.exists(args.target_dir):
        logger.error(f"{args.target_dir} doesn't exist.")
        sys.exit(1)

    for filename in os.listdir(args.source_dir):
        if filename.endswith(".ics"):
            file_path = os.path.join(args.source_dir, filename)
            process_ics_file(file_path, args.target_dir, args.dry_run)


if __name__ == "__main__":
    main()
