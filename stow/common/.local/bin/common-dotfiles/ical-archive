#!/usr/bin/env python
#
# pyright: reportAny=false

import argparse
import logging
import shutil
import sys
from datetime import date, datetime, timedelta
from pathlib import Path

import pytz
from icalendar.cal import Calendar, Component

logger = logging.getLogger("ical-archive")
logger.propagate = False
logger.setLevel(logging.WARNING)

syserr_handler = logging.StreamHandler(stream=sys.stderr)
syserr_handler.setLevel(logging.WARNING)
syserr_handler.setFormatter(
    logging.Formatter("ical-archive: %(levelname)s: %(message)s")
)
logger.addHandler(syserr_handler)


def normalize_date(dt: date) -> datetime:
    if not isinstance(dt, datetime):
        dt = datetime.combine(dt, datetime.min.time(), pytz.UTC)

    if dt.tzinfo is None or dt.tzinfo.utcoffset(dt) is None:
        dt = dt.replace(tzinfo=pytz.UTC)

    return dt


def check_date_old(date_found: date, days_old: int) -> bool:
    return date_found < datetime.now(pytz.UTC) - timedelta(days=days_old)


def item_eligible_for_archiving(
    file_path: Path, component: Component, days_old: int
) -> tuple[bool, datetime | None]:
    if component.name == "VTODO":
        if component.get("STATUS") == "COMPLETED":
            completed_date: datetime = normalize_date(component.get("COMPLETED").dt)
            return (check_date_old(completed_date, days_old), completed_date)

        return (False, None)
    else:
        dt: datetime

        if component.get("RRULE") is not None:
            logger.warning(f"RRULE present for component in {file_path}, skipping...")
            return (False, None)

        if component.get("DTEND") is not None:
            dt = normalize_date(component.get("DTEND").dt)
        else:
            logger.warning(
                f"No DTEND property for component in {file_path}, "
                + "using DTSTART instead."
            )
            dt = normalize_date(component.get("DTSTART").dt)

        if dt and check_date_old(dt, days_old):
            return (True, dt)

        return (False, None)


def multiple_event_todos(cal: Component) -> bool:
    count: int = 0

    for component in cal.walk():
        if component.name in {"VEVENT", "VTODO"}:
            count += 1

    return count > 1


def process_ics_file(
    file_path: Path,
    target_dir: Path,
    dry_run: bool,  # noqa: FBT001
    days_old: int,
) -> None:
    with file_path.open("rb") as f:
        cal: Component = Calendar.from_ical(f.read())  # pyright: ignore[reportArgumentType]

    if multiple_event_todos(cal):
        logger.warning(f"Multiple VTODO/VEVENT items in {file_path}, skipping..")
        return

    for component in cal.walk():
        if component.name in {"VTODO", "VEVENT"}:
            (is_old, dt) = item_eligible_for_archiving(file_path, component, days_old)

            if is_old:
                target_path = target_dir / file_path.name
                if dry_run:
                    logger.info(
                        f"[DRY RUN] Would move: {file_path} to {target_path}, "
                        + f"completed/end date = {dt}, "
                        + f"summary = {component.get('SUMMARY')}"
                    )
                else:
                    shutil.move(file_path, target_path)
                    logger.info(f"Moved: {file_path} -> {target_path}")


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("source_dir", type=str)
    parser.add_argument("target_dir", type=str)
    parser.add_argument("--dry-run", action="store_true")
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("--days-old", type=int, default=365)

    args = parser.parse_args()

    sourcedir = Path(args.source_dir)
    targetdir = Path(args.target_dir)

    if args.verbose:
        logger.setLevel(logging.INFO)
        syserr_handler.setLevel(logging.INFO)

    if not targetdir.exists():
        logger.error(f"{targetdir} doesn't exist.")
        sys.exit(1)

    for filename in sourcedir.iterdir():
        if filename.suffix == ".ics":
            file_path: Path = sourcedir / filename
            process_ics_file(file_path, args.target_dir, args.dry_run, args.days_old)


if __name__ == "__main__":
    main()
