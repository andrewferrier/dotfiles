#!/usr/bin/env ruby
#
# This script will update a subdirectory within a git checkout directory (aka
# the parent repository), which contains the contents of another git
# repository (aka the child repository). It will create a single commit to
# bring the parent's subdirectory up-to-date with the current contents of the
# child repository, with a commit comment which contains the short hash of the
# latest commit from the child (if there are no changes, a commit is not
# created).
#
# This script can therefore be considered as a lightweight way of
# representing, and keeping up-to-date, the contents of a child repository
# within a parent, without explicit use of git-submodule.
#
# The script tries to be "safe" by checkout if there is any dirtiness in the
# working copy. If there is, it refuses to continue.
#
# Note that git history from the child repository is not accurately
# represented in the parent repository - commits from the child repo between
# the last time this command was called, and this one, are ignored, apart from
# the very latest.
#
# Example usage:
#
# git-refresh-from-remote ~/local-git-checkout/repositoryX http://remote.host/repositoryX
#
# Possible future enhancements:
#
# * Support --no-commit, like other git commands.
# * Support complete representation of child history in parent.
# * Clarify process/message printed when adding child repo for the first time.

require 'tmpdir'

innerModuleLocation = ARGV[0]
innerModuleRemoteURL = ARGV[1]

currentStatus=`git status --porcelain`
if currentStatus.length > 0
    abort("'git status' is showing that your working copy isn't absolutely pristine. " +
          "That might mean you have untracked files, or changes to files. " +
          "Please resolve these before using git-refresh-from-remote.")
end

moduleTempDir = Dir.mktmpdir

puts("Temporary module directory is " + moduleTempDir)
puts("Cloning remote repository...")

system("git clone --depth 1 " + innerModuleRemoteURL + " " + moduleTempDir) or abort("Cannot clone " + innerModuleRemoteURL)
puts("")
commit = Dir.chdir(moduleTempDir) do
    system("git submodule update --init --recursive") or abort("Cannot update submodules")
    commit=`git rev-parse --short HEAD`
    system("find . | grep /.git$ | xargs rm -R") or abort("Cannot remove .git from fresh checkout")
    commit.strip
end

puts("Commit from remote repository is " + commit)

FileUtils.rm_r Dir.glob(innerModuleLocation)
FileUtils.mv moduleTempDir, innerModuleLocation
system("git add -A " + innerModuleLocation) or abort("Cannot add new files")
system("git commit -m 'Update " + innerModuleLocation + " (" + commit + " from " + innerModuleRemoteURL + ").'") or abort("Cannot commit")
