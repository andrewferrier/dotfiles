#!/usr/bin/env python

import os
from pathlib import Path
import logging
import platform
import subprocess
import sys

from typing import Literal

BASE_PATH = Path("~/.cache/day-night").expanduser()
BASE_PATH.mkdir(parents=True, exist_ok=True)
STATE_FILE = BASE_PATH.joinpath("state")

logger = logging.getLogger("day-night-update")
logger.propagate = False
logger.setLevel(logging.WARNING)

syserr_handler = logging.StreamHandler(stream=sys.stderr)
syserr_handler.setLevel(logging.WARNING)
syserr_handler.setFormatter(
    logging.Formatter("%(asctime)s: %(name)s: %(levelname)s: %(message)s")
)
logger.addHandler(syserr_handler)


def read_state_file() -> str | None:
    try:
        with Path.open(STATE_FILE) as file:
            return file.readline().strip()
    except FileNotFoundError:
        logger.exception(f"{STATE_FILE} was not found.")
        return None
    except Exception:
        logger.exception("An error occurred")
        return None


def get_state_macos() -> Literal["day", "night"]:
    if "DARKMODE" in os.environ:
        # DARKMODE comes from day-night-notifier
        if int(os.environ["DARKMODE"]) == 1:
            return "night"
        else:
            return "day"
    else:
        # Assume 10.15+ and AppleInterfaceStyleSwitchesAutomatically=True, see
        # https://stackoverflow.com/a/57429660
        output = subprocess.run(
            ["defaults", "read", "-g", "AppleInterfaceStyle"],
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL,
            check=True,
        )

        if output.returncode > 0:
            return "day"
        elif output.stdout == b"Dark\n":
            return "night"
        else:
            raise Exception("Could not run defaults read")


if platform.system() == "Linux":
    logger.error("No longer supports Linux.")
    sys.exit(1)

state: Literal["day", "night"] = get_state_macos()
current_state = read_state_file()

if state != current_state:
    scripts_dir: Path = Path.home() / ".local" / "share"

    if state == "day":
        scripts_dir = scripts_dir / "light-mode.d"
    else:
        scripts_dir = scripts_dir / "dark-mode.d"

    sh_files: list[Path] = list(scripts_dir.glob("*.sh"))

    for sh_file in sh_files:
        try:
            logger.info(f"Running script {sh_file}...")
            result: subprocess.CompletedProcess[bytes] = subprocess.run(
                [sh_file], shell=True, check=True, capture_output=True
            )
        except subprocess.CalledProcessError as e:  # noqa: PERF203
            logger.exception(
                f"Warning: Script {sh_file} failed with return code {e.returncode}"
            )
            logger.exception(f"Error message: {e.stderr.decode()}")  # pyright: ignore[reportAny]
else:
    logger.warning(
        f"Current state is already {current_state}; wanted to switch to {state}."
    )
