#!/usr/bin/env bash

set -o errexit
set -o nounset

if [[ -t 0 ]]; then
    INTERACTIVE=true
else
    INTERACTIVE=false
fi

while getopts "I" o; do
    case "${o}" in
    I)
        INTERACTIVE=false
        ;;
    *)
        echo "Invalid option"
        exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

if [[ -n "${DISPLAY:-}" ]] || [[ ${OSTYPE} == darwin* ]]; then
    GRAPHICAL=true
else
    GRAPHICAL=false
fi

in_lf() {
    set +o nounset
    [[ -z "${LF_LEVEL}" ]]
    result=$?
    set -o nounset
    return "$result"
}

function open-directory() {
    if [[ -d "${FILE}/cur" && -d "${FILE}/new" && -d "${FILE}/tmp" ]]; then
        # This is a maildir directory
        if ${INTERACTIVE}; then
            # shellcheck disable=SC1091,1090
            source "${HOME}/.config/sh-local.d/mutt.sh"
            mutt -f "${FILE}"
        else
            # shellcheck disable=SC2154
            ${TERMCMD} --title "mutt [${FILE}]" bash -c "source '${HOME}/.config/sh-local.d/mutt.sh'; mutt -f '${FILE}'"
        fi
    else
        if [[ ${OSTYPE} == darwin* ]]; then
            # shellcheck disable=SC2310
            if ${INTERACTIVE} && in_lf; then
                lf "${FILE}"
            else
                open "${FILE}"
            fi
        else
            # shellcheck disable=SC2154
            ${TERMCMD} lf "${FILE}" &
        fi
    fi
}

function open-calendar() {
    ${TERMCMD} khal import "${FILE}"
}

function open-text() {
    if [[ ${OSTYPE} == darwin* ]]; then
        if ${INTERACTIVE}; then
            # shellcheck disable=SC2154
            ${VISUAL} "${FILE}"
        else
            open -t "${FILE}"
        fi
    else
        if ${GRAPHICAL}; then
            ${TERMCMD} "${VISUAL}" "${FILE}" &>/dev/null &
        else
            ${VISUAL} "${FILE}"
        fi
    fi
}

function open-system() {
    if [[ ${OSTYPE} == darwin* ]]; then
        open "${FILE}"
    else
        # 'nohup' is needed to ensure that when files are opened from lf
        # that closing lf doesn't close the target app.
        nohup xdg-open "${FILE}" &>/dev/null &
    fi
}

function text-treat-as-binary() {
    LIST="drawio html svg webloc"

    if [[ ${LIST} =~ (^|[[:space:]])$1($|[[:space:]]) ]]; then
        true
    else
        false
    fi
}

function is-archive() {
    LIST="7z ace ar arc bz2? cab cpio cpt deb dgc dmg gz iso jar msi pkg rar shar tar tgz xar xpi xz zip"

    if [[ ${LIST} =~ (^|[[:space:]])$1($|[[:space:]]) ]]; then
        true
    else
        false
    fi
}

for FILE in "$@"; do
    # If a ~ has been passed in (e.g. from file-list), expand it.
    FILE=${FILE/\~/${HOME}}
    # Remove any newlines from FILE
    FILE=${FILE//$'\n'/}

    if [[ ${FILE} == http* ]]; then
        open-system "${FILE}"
    else
        if [[ -e ${FILE} ]]; then
            FILE_EXTENSION_LOWER="$(printf "%s" "${FILE##*.}" | tr '[:upper:]' '[:lower:]')"

            fasd -A "${FILE}" &

            if command -v memy >/dev/null 2>&1; then
                memy --note "${FILE}" &
            fi

            MIME_TYPE=$(file --brief --mime-type "${FILE}")
            readonly MIME_TYPE

            # shellcheck disable=SC2310
            if [[ -d "${FILE}" ]]; then
                open-directory "${FILE}"
            elif is-archive "${FILE_EXTENSION_LOWER}" && command -v aunpack &>/dev/null; then
                DIR=$(dirname "${FILE}")
                (cd "${DIR}" && aunpack "${FILE}")
            elif [[ ${MIME_TYPE} == 'text/calendar' ]]; then
                open-calendar "${FILE}"
            elif (isutf8 -q "${FILE}" || [[ ${MIME_TYPE} == "text/plain" ]]) && (! text-treat-as-binary "${FILE_EXTENSION_LOWER}"); then
                open-text "${FILE}"
            else
                open-system "${FILE}"
            fi
        else
            echo >&2 "${FILE} does not exist."
            exit 1
        fi
    fi
done
