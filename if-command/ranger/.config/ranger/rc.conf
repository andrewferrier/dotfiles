# vim: set ft=conf:
#
# Commands/keys:
# * 'flat <n>' to flatten to a depth of <n>
# * 'mark <regex>' - mark files which match a regex.
# * .<key> - use filters to restrict files shown.
# * H/L - navigate through history.
# * i - display file
# * uy - unyank
# * yd - yank current directory
# * yp - yank currently highlighted path
# * ~ - switch between single and multi-column.
#
# * <space> - mark current file
# * uv - unmark all files
# * v - invert all marks (select all if none selected)
#
# TODO:
# * Provide a 'sort by MD5'

set mouse_enabled false
set save_console_history false
set unicode_ellipsis true

# Toggle hidden files with 'zh'
set hidden_filter ^\.|^lost\+found$|^__pycache__$

set shorten_title 2
set tilde_in_titlebar true
set update_title true

map <C-f> FileListFileFind
map <C-g> FileListDirectorySwitch
map D console mkdir%space
map F Folderize
map N shell normfn %s
map P shell -s qlmanage -p %s # This only makes sense on MacOS
map R shell -w pdf-clean %s
map T shell tig
map Z Zip %s
map go shell -s open-file %d

# Equivalent of @ but for the directory I'm in (e.g. can use geeqie).
map d@ console -p6 shell  %%d

set confirm_on_delete always
map <delete> delete

unmap g?
unmap gL
unmap gR
unmap gi
unmap gm
unmap gr
unmap gs
unmap gu
unmap gv

map g- cd -
map ga cd ~/paperwork
map gd cd /data
map ge cd ~/personal
map gg cd ~/gitco
map gn cd ~/notes
map gk cd ~/Desktop
map gl cd ~/Downloads

map M5 linemode md5

map cw eval fm.execute_console("bulkrename") if fm.thisdir.marked_items else fm.open_console("rename ")
map ciw eval fm.execute_console("bulkrename") if fm.thisdir.marked_items else fm.execute_console("rename_append -r -a")

map du shell ncdu %d

# Explicit mapping is needed to avoid confirmation and ranger crash
map dT Trash

# Disable C-h and backspace for hiding files (zh can still be used)
unmap <backspace>
unmap <backspace2>

# Keys I don't need/use
unmap oz
unmap dU

unmap <F1>
unmap <F2>
unmap <F3>
unmap <F4>
unmap <F5>
unmap <F6>
unmap <F7>
unmap <F8>
unmap <F10>
